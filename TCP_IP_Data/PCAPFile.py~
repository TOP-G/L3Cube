'''

Problem Statement - Write a code to display the data in PCAP files.

*****USAGE*****
$ python PCAPFile.py

Note: 
1) scapy must be installed.
2) put all the pcap files in the same folder where the program is stored.

'''

import sys
from scapy.all import *
from struct import *

#Convert a string of 6 characters of ethernet address into a dash separated hex string
def eth_addr (a):
	b = "%.2x:%.2x:%.2x:%.2x:%.2x:%.2x" % (ord(a[0]) , ord(a[1]) , ord(a[2]), ord(a[3]), ord(a[4]) , ord(a[5]))
	return b

#Function for displaying TCP Packets
def print_tcp_packet(data,protocol,size,iph_length,eth_length,streth,striph):
	#TCP protocol
	print "TCP Packet"
	ftcp=open("tcpnew.txt",'a')
	t = iph_length + eth_length
	tcp_header = packet[t:t+20]

	tcph = unpack('!HHLLBBHHH' , tcp_header)

	source_port = tcph[0]
	dest_port = tcph[1]
	sequence = tcph[2]
	acknowledgement = tcph[3]
	doff_reserved = tcph[4]
	tcph_length = doff_reserved >> 4
	if (source_port==80 or dest_port==80):
		print "HTTP Packet"
	if (source_port==179 or dest_port==179):
		print "BGP Packet"

	str1='Source Port: ' + str(source_port) + '\nDest Port: ' + str(dest_port) + '\nSequence Number: ' + str(sequence) + '\nAcknowledgement: ' + str(acknowledgement) + '\nTCP header length: ' + str(tcph_length*4)
	print str1
	ftcp.write(streth)
	ftcp.write(striph)
	ftcp.write(str1)

	h_size = eth_length + iph_length + tcph_length * 4
	data_size = len(packet) - h_size

	#get data from the packet
	data = packet[h_size:]

	print 'Data: ' + data
	ftcp.write(data)
	ftcp.write("\n\n")
	if (source_port==80 or dest_port==80):
		return (1,0)
	if (source_port==179 or dest_port==179):
		return (0,1)
	return (0,0)

#Function for displaying ICMP Packets
def print_icmp_packet(data,protocol,size,iph_length,eth_length,streth,striph):
	#ICMP Packets
	print "ICMP Packet"

	ficmp=open("icmpnew.txt",'a')
	u = iph_length + eth_length
	icmph_length = 4
	icmp_header = packet[u:u+4]


	icmph = unpack('!BBH' , icmp_header)

	icmp_type = icmph[0]
	code = icmph[1]
	checksum = icmph[2]

	stricmp= 'Type: ' + str(icmp_type) + '\nCode: ' + str(code) + '\nChecksum: ' + str(checksum)
	print stricmp
	ficmp.write(streth)
	ficmp.write(striph)
	ficmp.write(stricmp)

	h_size = eth_length + iph_length + icmph_length
	data_size = len(packet) - h_size

	#get data from the packet
	data = packet[h_size:]

	print 'Data: ' + data
	ficmp.write(data)
	ficmp.write("\n\n")

#Function for displaying UDP Packets
def print_udp_packet(data,protocol,size,iph_length,eth_length,streth,striph):
	#UDP packets
	print "UDP Packet"

	fudp=open("udpnew.txt",'a')
	u = iph_length + eth_length
	udph_length = 8
	udp_header = packet[u:u+8]


	udph = unpack('!HHHH' , udp_header)

	source_port = udph[0]
	dest_port = udph[1]
	length = udph[2]
	checksum = udph[3]

	strudp= 'Source Port: ' + str(source_port) + '\nDest Port: ' + str(dest_port) + '\nLength: ' + str(length) + '\nChecksum: ' + str(checksum)
	print strudp
	fudp.write(streth)
	fudp.write(striph)
	fudp.write(strudp)

	h_size = eth_length + iph_length + udph_length
	data_size = len(packet) - h_size

	#get data from the packet
	data = packet[h_size:]

	print 'Data: ' + data
	fudp.write(data)
	fudp.write("\n\n")

#Function for displaying Other Packets
def print_other_packet(data,protocol,size,iph_length,eth_length,streth,striph):
	if (protocol!=1 and protocol!=6 and protocol!=17):
	    
		foth=open("othernew.txt",'a')
		print 'Protocol other than TCP/UDP/ICMP/ARP'

		u = iph_length + eth_length

		data = packet[u:]
		foth.write(streth)
		foth.write(striph)
		foth.write(data)
		foth.write("\n\n")			

#Function for displaying ARP Packets
def print_arp_packet(packet,eth_length,streth):
	#write packets to file arpnew.txt
	farp=open("arpnew.txt",'a')

	print "\nARP Packet\n"
	arp_length=28
	arp_header = packet[eth_length:eth_length+arp_length]


	arph = unpack('!HHBBH6s4s6s4s' , arp_header)                          #unpack ARP Header

	htype = arph[0]
	ptype = arph[1]
	halen = arph[2]
	palen = arph[3]
	opn = arph[4]
	shaddr=arph[5]
	s_addr = socket.inet_ntoa(arph[6])
	thaddr=arph[7]
	t_addr = socket.inet_ntoa(arph[8]);

	strarp= 'Hardware Type: '+str(htype) + '\nProtocol Type: ' + str(ptype) + '\nHardware Address Length: ' + str(halen) + '\nProtocol Address Length: ' + str(palen) + '\nOperation: '+ str(opn) + '\nSender Hardware Address: ' + eth_addr(shaddr) + '\nSender IP Address: '+ str(s_addr) + '\nTarget Hardware Address: ' + eth_addr(thaddr) + '\nTarget IP address: ' + str(t_addr)

	print strarp

	farp.write(streth)                                                     #write to file
	farp.write(strarp)

	h_size = eth_length + arp_length
		                                                           #get data from packet
	data = packet[h_size:]

	print 'Data: ' + data
	farp.write(data)
	farp.write("\n\n")
         

#main  starts

no_of_tcp=0; no_of_udp=0; no_of_icmp=0; no_of_arp=0; no_of_other=0;total_no=0;no_of_http=0;no_of_bgp=0;no_of_non_ip=0;

#accept pcap file path
print "Enter Path of pcap File:",
path=raw_input()
pkts= rdpcap(path)

for packet in pkts:
	#convert packets to string
	packet=str(packet)                                                                     
	total_no=total_no+1
	
	#parse ethernet header
	eth_length = 14
	eth_header = packet[:eth_length]
	
	#unpack ethernet header
	eth = unpack('!6s6sH' , eth_header)                                                    
	eth_protocol = socket.ntohs(eth[2])
	streth= 'Destination MAC: ' + eth_addr(packet[0:6]) + '\nSource MAC: ' + eth_addr(packet[6:12]) + '\nProtocol: ' + str(eth_protocol)
	print streth

	#check for ARP Packets EtherType=1544 (0x608)
	if eth_protocol == 1544:                                                              
		no_of_arp=no_of_arp+1
		print_arp_packet(packet,eth_length,streth)


	#Parse IP packets, IP Protocol number = 8
	elif eth_protocol == 8:                                                                 
		#check for IP Packets EtherType=8 (0x8)
		#Parse IP header
		#take first 20 characters for the ip header
		ip_header = packet[eth_length:20+eth_length]
		 
		#now unpack them
		#unpack IP header
		iph = unpack('!BBHHHBBH4s4s' , ip_header)                                         
		version_ihl = iph[0]
		version = version_ihl >> 4
		ihl = version_ihl & 0xF

		iph_length = ihl * 4

		ttl = iph[5]
		protocol = iph[6]
		s_addr = socket.inet_ntoa(iph[8]);
		d_addr = socket.inet_ntoa(iph[9]);

		striph= '\nVersion: ' + str(version) + '\nIP Header Length: ' + str(ihl) + '\nTTL: ' + str(ttl) + '\nProtocol: ' + str(protocol) + '\nSource Address: ' + str(s_addr) + '\nDestination Address: ' + str(d_addr)
		print striph

		if protocol==6:                                                                  #check for TCP packets protocol=6
			no_of_tcp=no_of_tcp+1
			a,b=print_tcp_packet(packet, protocol,0,iph_length,eth_length,streth,striph)
			no_of_http=no_of_http+a
			no_of_bgp=no_of_bgp+b
		elif protocol==1:                                                                #check for ICMP packets protocol=1
			no_of_icmp=no_of_icmp+1
			print_icmp_packet(packet, protocol,0,iph_length,eth_length,streth,striph)
		elif protocol==17:                                                               #check for UDP packets protocol=17
			no_of_udp=no_of_udp+1
			print_udp_packet(packet, protocol,0,iph_length,eth_length,streth,striph)
		else:                                                                            #other type of packets
			no_of_other=no_of_other+1
			print_other_packet(packet, protocol,0,iph_length,eth_length,streth,striph)
	else:
		print "Other Non IP Packet:"
		no_of_non_ip+=1

print "\n****************************************************************************"
print "                                   SUMMARY"
print "****************************************************************************"
print "Total No of Packets:  "+str(total_no)
print "TCP packets:          "+str(no_of_tcp)
print "HTTP packets:         "+str(no_of_http)
print "BGP packets:          "+str(no_of_bgp)
print "UDP packets:          "+str(no_of_udp)
print "ICMP packets:         "+str(no_of_icmp)
print "ARP packets:          "+str(no_of_arp)
print "Other IP packets:     "+str(no_of_other)
print "Other Non IP Packets  "+str(no_of_non_ip)
print "\n****************************************************************************"
